{"version":3,"sources":["components/algorithm/structure-query-functions.js","components/algorithm/loop.js","components/Scene.js","components/input/Radio_.js","components/GeometryList.js","components/input/Slider_.js","components/FunctionList.js","App.js","index.js"],"names":["processEdgeLoop","v1","v2","oldVertices","sourceEdges","currentFace","metaVertices","edge","vertexIndexA","Math","min","vertexIndexB","max","key","a","b","newEdgePoint","faces","push","edges","newFace","newFaces","c","materialIndex","THREE","undefined","getEdge","createNewUv","newUvs","clone","midpoint","abs","SubdivisionModifier","subdivisions","adjacent_weight","edge_point_weight","connecting_edges_weight","Object","classCallCheck","this","prototype","modify","geometry","mergeVertices","iterations","i","subdivide","computeFaceNormals","computeVertexNormals","newVertices","sourceVertices","vertices","sourceFaces","sourceUvs","faceVertexUvs","vertexHolder","hasUvs","length","sourceVerticesRelationships","Array","oldFaces","sourceEges","generateLookupsLoop","oppositePoint","currentEdge","face","connectedFaces","connectingEdge","connectingPoint","connectingEdges","oldVertex","newSourceVertex","newEdgeVertices","adjacentVertexWeight","edgeVertexWeight","faceVertices","addVectors","multiplyScalar","set","j","k","add","beta","sourceVertexWeight","connectingVertexWeight","newSourceVertices","numberOfConnectingEdges","concat","edge1","edge2","edge3","uv","x0","x1","x2","sl","x3","x4","x5","x","y","scene","camera","renderer","controls","shape","smooth","exportSTL","require","OrbitControls","Scene","props","_this","possibleConstructorReturn","getPrototypeOf","call","start","frameId","requestAnimationFrame","update","stop","cancelAnimationFrame","render","window","handleResize","width","mount","clientWidth","height","clientHeight","setSize","aspect","updateProjectionMatrix","getGeometry","w","h","getPlane","material","side","color","setHex","mesh","rotation","position","receiveShadow","generateSubdivision","modifier","wireframe","params","parameters","scale","setScalar","meshScale","name","castShadow","export","buffer","fromGeometry","blob","Blob","type","mimeType","saveAs","bind","assertThisInitialized","innerWidth","innerHeight","background","z","lookAt","hemisphereLight","hemiLightHelper","directionalLight","shadow","mapSize","near","far","dirLightHeper","plane","antialias","shadowMap","enabled","domElement","enablePan","enableKeys","enableDamping","dampingFactor","rotateSpeed","maxDistance","minDistance","maxPolarAngle","addEventListener","appendChild","prevProps","remove","dispose","exportClicked","removeEventListener","removeChild","_this2","react_default","createElement","className","ref","Component","Radio_","react_list_dist","primaryText","meta","react_radio_dist_default","wrapperClasses","react_radio_dist","value","id","onChange","GeometryList","state","checked","geometries_list","image","map","g","input_Radio_","Fragment","react_checkbox_dist_default","Slider_","label","Slider_default","classes","thumb","trackBefore","step","aria-labelledby","React","FunctionList","functions_list","f","input_Slider_","App","toggleDrawer","setState","prevState","drawerOpen","handleChange","event","slider_value","target","defineProperty","handleClick","react_drawer_dist_default","dismissible","open","react_drawer_dist","tag","react_list_dist_default","nonInteractive","components_GeometryList","components_FunctionList","react_button_dist_default","outlined","onClick","dist_default","title","navigationIcon","react_material_icon_dist_default","icon","dist","components_Scene","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ee0d0a48.chunk.js","sourcesContent":["// ------------------------------------------------- //\r\n// Evan MacHale - N00150552\r\n// 26.01.19\r\n// Three.js\r\n// Functions used to setup an object to query our geometry.\r\n// Taken from Threejs.org + rewritten.\r\n// I don't have time as of the above date to merge functions\r\n// Each algorithm has a slightly differnt JS object data structure\r\n// ------------------------------------------------- //\r\n\r\nimport * as THREE from 'three';\r\n\r\n// ------------------------------------------------- //\r\n\r\n/*\r\n  Catmull-Clark\r\n*/\r\nexport const generateLookupsCat = (sourceVertices, sourceFaces, oldVerticesRelationships, sourceEdges) => {\r\n  // for every vertex, add a new object w/ array of objects.\r\n  for (let i = 0; i < sourceVertices.length; i++) {\r\n    oldVerticesRelationships[i] = {vertex:sourceVertices[i], edges:[]};\r\n  }\r\n  for (let i = 0; i < sourceFaces.length; i++) {\r\n    // Three edges of traingle.\r\n    processEdgeCat(sourceFaces[i].a, sourceFaces[i].b, sourceVertices, sourceEdges, sourceFaces[i], oldVerticesRelationships);\r\n    processEdgeCat(sourceFaces[i].b, sourceFaces[i].c, sourceVertices, sourceEdges, sourceFaces[i], oldVerticesRelationships);\r\n    processEdgeCat(sourceFaces[i].c, sourceFaces[i].a, sourceVertices, sourceEdges, sourceFaces[i], oldVerticesRelationships);\r\n  }\r\n}\r\n\r\n// processEdge puts all edge objects into metaVertices\r\n// Each edge object holds vertices of the edge and the two faces.\r\nexport const processEdgeCat = (v1, v2, sourceVertices, sourceEdges, currentFace, metaVertices) => {\r\n  const vertexIndexA = Math.min(v1, v2);\r\n  const vertexIndexB = Math.max(v1, v2);\r\n  const key = vertexIndexA + \"_\" + vertexIndexB;\r\n  let edge;\r\n  // If edge already exists... our edge var equals that edge.\r\n  // Remember, each edge has two faces...\r\n  // We cross-reference sourceEges with our current vertices.\r\n  if (key in sourceEdges) { // key:value\r\n    edge = sourceEdges[key];\r\n  } else {\r\n    const vertexA = sourceVertices[vertexIndexA];\r\n    const vertexB = sourceVertices[vertexIndexB];\r\n    edge = {\r\n      a: vertexA, // pointer reference\r\n      b: vertexB,\r\n      edgePoint: null,\r\n      midPoint: null,\r\n      // aIndex: a, // numbered reference\r\n      // bIndex: b,\r\n      faces: [] // pointers to faces\r\n    };\r\n    // Give the edge the info\r\n    sourceEdges[key] = edge;\r\n  }\r\n  // Setup facePoint\r\n  const triangle = new THREE.Triangle(sourceVertices[currentFace.a], sourceVertices[currentFace.b], sourceVertices[currentFace.c]);\r\n  let facePoint = new THREE.Vector3();\r\n  triangle.getMidpoint(facePoint); // Result copied into facePoint.\r\n  edge.faces.push({currentFace, facePoint});\r\n  // edge.faces.push(currentFace);\r\n  // For both points on the edge, give them the edge info.\r\n  metaVertices[v1].edges.push(edge);\r\n  // Below ends up with duplicates in metaVertices.edges\r\n  // metaVertices[v2].edges.push(edge);\r\n}\r\n\r\n// Find an edge on the face using half edge lookup\r\n// Then check faces points for a match on that edge\r\nexport const getFacePoint = (a,b,c,sourceEdges,facePoints) => {\r\n  const vertexIndexA = Math.min(a, b);\r\n  const vertexIndexB = Math.max(a, b);\r\n  const key = vertexIndexA + \"_\" + vertexIndexB;\r\n  const currentEdge = sourceEdges[key];\r\n  for (let i = 0; i < currentEdge.faces.length; i++) {\r\n    const currentFace = currentEdge.faces[i].currentFace;\r\n    // if (currentFace.a === a && currentFace.b === b && currentFace.c === c) {\r\n    //   return currentEdge.faces[i].facePoint;\r\n    // }\r\n    if (currentFace.a === a && currentFace.b === b && currentFace.c === c) {\r\n      const matchedFacePoint = currentEdge.faces[i].facePoint\r\n      // console.log(facePoints);\r\n      // console.log(currentEdge.faces[i].facePoint);\r\n      // console.log(facePoints.indexOf(currentEdge.faces[i].facePoint));\r\n      // return facePoints.indexOf(currentEdge.faces[i].facePoint);\r\n      for (let i = 0; i < facePoints.length; i++) {\r\n        if (matchedFacePoint.equals(facePoints[i])) {\r\n          // console.log(i);\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Find an edge on the face\r\n// Return it's edgePoint\r\nexport const getEdgePoint = (a, b, sourceEdges, edgePoints) => {\r\n  const vertexIndexA = Math.min(a, b);\r\n  const vertexIndexB = Math.max(a, b);\r\n  const key = vertexIndexA + \"_\" + vertexIndexB;\r\n  const matchedEdgePoint = sourceEdges[key].edgePoint;\r\n  for (let i = 0; i < edgePoints.length; i++) {\r\n    if (matchedEdgePoint.equals(edgePoints[i])) {\r\n      // console.log(i);\r\n      return i;\r\n    }\r\n  }\r\n}\r\n\r\n// THREE.Face4 depreciated\r\n// Need to draw two triangles to emulate quad\r\nexport const createNewFace = (newFaces, a, b, c, d, materialIndex) => {\r\n  newFaces.push(new THREE.Face3(\r\n    a, b, d, undefined, undefined, materialIndex\r\n  ));\r\n  newFaces.push(new THREE.Face3(\r\n    a, c, d, undefined, undefined, materialIndex\r\n  ));\r\n}\r\n\r\n/*\r\n  loop\r\n*/\r\nexport const generateLookupsLoop = (oldVertices, oldFaces, metaVertices, sourceEges) => {\r\n  // for every vertex, add a new object w/ array of objects.\r\n  for (let i = 0; i < oldVertices.length; i++) {\r\n    metaVertices[i] = {edges:[]};\r\n  }\r\n  for (let i = 0; i < oldFaces.length; i++) {\r\n    // Three edges of traingle.\r\n    // ------------------------------------------------- //\r\n    //    .a _ _ _ 1 _ _ _ .b\r\n    //       \\           /\r\n    //       3 \\       / 2          // Processing\r\n    //           \\   /\r\n    //            .c\r\n    // ------------------------------------------------- //\r\n    processEdgeLoop(oldFaces[i].a, oldFaces[i].b, oldVertices, sourceEges, oldFaces[i], metaVertices);\r\n    processEdgeLoop(oldFaces[i].b, oldFaces[i].c, oldVertices, sourceEges, oldFaces[i], metaVertices);\r\n    processEdgeLoop(oldFaces[i].c, oldFaces[i].a, oldVertices, sourceEges, oldFaces[i], metaVertices);\r\n  }\r\n}\r\n\r\nexport const processEdgeLoop = (v1, v2, oldVertices, sourceEdges, currentFace, metaVertices) => {\r\n  const vertexIndexA = Math.min(v1, v2);\r\n  const vertexIndexB = Math.max(v1, v2);\r\n  const key = vertexIndexA + \"_\" + vertexIndexB;\r\n  let edge;\r\n  // If edge already exists... our edge var equals that edge.\r\n  // Remember, each edge has two faces...\r\n  // We cross-reference sourceEges with our current vertices.\r\n  if (key in sourceEdges) { // key:value\r\n    edge = sourceEdges[key];\r\n  } else {\r\n    const vertexA = oldVertices[vertexIndexA];\r\n    const vertexB = oldVertices[vertexIndexB];\r\n    edge = {\r\n      a: vertexA, // pointer reference\r\n      b: vertexB,\r\n      newEdgePoint: null,\r\n      // aIndex: a, // numbered reference\r\n      // bIndex: b,\r\n      faces: [] // pointers to faces\r\n    };\r\n    // Give the edge the info\r\n    sourceEdges[key] = edge;\r\n  }\r\n  // Then give the edge the current face\r\n  // ------------------------------------------------- //\r\n  //         /\\\r\n  //       /    \\\r\n  //     /   F1   \\       // create edge object if not existing.\r\n  //   .a - - - - .b      // push the faces to edge.\r\n  //     \\   F2   /       // Add edge to metaVertices for both points.\r\n  //       \\    /\r\n  //         \\/\r\n  // ------------------------------------------------- //\r\n  edge.faces.push(currentFace);\r\n  // For both points on the edge, give them the edge info.\r\n  metaVertices[v1].edges.push(edge);\r\n  metaVertices[v2].edges.push(edge);\r\n}\r\n\r\nexport const newFace = (newFaces, a, b, c, materialIndex) => newFaces.push(new THREE.Face3(a, b, c, undefined, undefined, materialIndex));\r\n\r\nexport const getEdge = (a, b, sourceEdges) => {\r\n  const vertexIndexA = Math.min(a, b);\r\n  const vertexIndexB = Math.max(a, b);\r\n  const key = vertexIndexA + \"_\" + vertexIndexB;\r\n  return sourceEdges[key];\r\n}\r\n\r\n/*\r\n  UVs\r\n*/\r\nexport const createNewUv = (newUvs, a, b, c) => {\r\n  // console.log(a);\r\n  // console.log(b);\r\n  // console.log(c);\r\n  newUvs.push( [ a.clone(), b.clone(), c.clone() ] );\r\n}\r\n\r\nexport const midpoint = (a, b) => (Math.abs(b - a) / 2) + Math.min(a, b);\r\n","// ------------------------------------------------- //\r\n// Evan MacHale - N00150552\r\n// 20.01.19\r\n// Three.js\r\n// Loop Subdivision\r\n// ------------------------------------------------- //\r\n\r\nimport * as THREE from 'three';\r\nimport {\r\n  generateLookupsLoop,\r\n  newFace,\r\n  getEdge,\r\n  createNewUv,\r\n  midpoint\r\n} from './structure-query-functions.js';\r\n\r\n// ------------------------------------------------- //\r\n\r\nclass SubdivisionModifier {\r\n  constructor(subdivisions, adjacent_weight, edge_point_weight, connecting_edges_weight) {\r\n    this.subdivisions = (subdivisions === undefined) ? 1 : subdivisions;\r\n    this.adjacent_weight = adjacent_weight;\r\n    this.edge_point_weight = edge_point_weight;\r\n    this.connecting_edges_weight = connecting_edges_weight;\r\n  }\r\n}\r\n\r\n// ------------------------------------------------- //\r\n\r\nSubdivisionModifier.prototype.modify = function(geometry) {\r\n  geometry = geometry.clone();\r\n\tgeometry.mergeVertices();\r\n  const iterations = this.subdivisions;\r\n  for (let i = 0; i < iterations; i++) {\r\n    this.subdivide(geometry);\r\n  }\r\n\tgeometry.computeFaceNormals();\r\n\tgeometry.computeVertexNormals();\r\n\treturn geometry;\r\n}\r\n\r\n// ------------------------------------------------- //\r\n\r\n// The big boy function that executes our algorithm.\r\nSubdivisionModifier.prototype.subdivide = function(geometry) {\r\n\r\n  const sourceVertices = geometry.vertices;\r\n  const sourceFaces = geometry.faces;\r\n  const sourceUvs = geometry.faceVertexUvs[0];\r\n\r\n  let newVertices, newFaces, newUvs = [];\r\n\r\n  const vertexHolder = new THREE.Vector3();\r\n\r\n  // ------------------------------------------------- //\r\n  // Step 0\r\n  // Sort out our data structure for referencing points.\r\n  // ------------------------------------------------- //\r\n\r\n  const hasUvs = sourceUvs !== undefined && sourceUvs.length > 0;\r\n  const sourceVerticesRelationships = new Array(sourceVertices.length);\r\n  const sourceEdges = {};\r\n  generateLookupsLoop(sourceVertices, sourceFaces, sourceVerticesRelationships, sourceEdges);\r\n\r\n  // ------------------------------------------------- //\r\n  // Step 1\r\n  // For each edge, create a new Edge Vertex, then position it.\r\n  // ------------------------------------------------- //\r\n\r\n  const newEdgeVertices = [];\r\n  let oppositePoint;\r\n  let newEdgePoint;\r\n\r\n  const adjacentVertexWeight = this.adjacent_weight;\r\n  const edgeVertexWeight = this.edge_point_weight;\r\n\r\n  // Keep track of edge/faces of edge.\r\n  let currentEdge;\r\n  let face;\r\n  let connectedFaces; // Always be 2.\r\n  // Faces held in geometry object have three vectors of key a, b or c.\r\n  const faceVertices = ['a','b','c'];\r\n\r\n  // For each edge create new edge point.\r\n  for (let i in sourceEdges) {\r\n    currentEdge = sourceEdges[i];\r\n    newEdgePoint = new THREE.Vector3();\r\n    connectedFaces = currentEdge.faces.length;\r\n    // Average of points on the edge\r\n    newEdgePoint.addVectors(currentEdge.a, currentEdge.b).multiplyScalar(edgeVertexWeight);\r\n    vertexHolder.set(0, 0, 0);\r\n    // For both faces, for every point on given face, find the third point.\r\n    for (let j = 0; j < connectedFaces; j ++) {\r\n      face = currentEdge.faces[j];\r\n      for (let k = 0; k < 3; k ++) {\r\n        oppositePoint = sourceVertices[face[faceVertices[k]]]; // a, b, c\r\n        if (oppositePoint !== currentEdge.a && oppositePoint !== currentEdge.b) break;\r\n      }\r\n      vertexHolder.add(oppositePoint);\r\n    }\r\n    // Average of two opposite points\r\n    vertexHolder.multiplyScalar(adjacentVertexWeight);\r\n    // Combine values of edge and opposite points to find new point.\r\n    newEdgePoint.add(vertexHolder);\r\n    // Keeps count of creation order.\r\n    currentEdge.newEdgePoint = newEdgeVertices.length;\r\n    newEdgeVertices.push(newEdgePoint); // List of edge points.\r\n  } // End for loop.\r\n\r\n  // ------------------------------------------------- //\r\n  // Step 2\r\n  // Reposition each source vertex.\r\n  // ------------------------------------------------- //\r\n\r\n  // Keep track of every connecting variable to our given point.\r\n  let connectingEdge, connectingPoint, connectingEdges;\r\n  // We iterate through sourceVertices + push new vertices to array.\r\n  let oldVertex, newSourceVertex;\r\n  // List of new positions for old vertices.\r\n  const newSourceVertices = [];\r\n\r\n  let beta, sourceVertexWeight, connectingVertexWeight; // Algorithm weights\r\n\r\n  for (let i = 0; i < sourceVertices.length; i++) {\r\n    oldVertex = sourceVertices[i];\r\n    // find all connecting edges (using lookupTable)\r\n    connectingEdges = sourceVerticesRelationships[i].edges;\r\n    const numberOfConnectingEdges = this.connecting_edges_weight;\r\n    // Loop's original beta formula\r\n    // beta = 1 / n * ( 5/8 - Math.pow( 3/8 + 1/4 * Math.cos( 2 * Math. PI / n ), 2) );\r\n    beta = 3 / (8 * numberOfConnectingEdges);\r\n    connectingVertexWeight = beta;\r\n    sourceVertexWeight = 1 - numberOfConnectingEdges * beta;\r\n    // Apply weight to source vertex.\r\n    newSourceVertex = oldVertex.clone().multiplyScalar(sourceVertexWeight); // 1 - nβ\r\n    // For each edge, find each point that this point is related to.\r\n    vertexHolder.set(0, 0, 0);\r\n    for (let j = 0; j < numberOfConnectingEdges; j++) {\r\n      connectingEdge = connectingEdges[j];\r\n      connectingPoint = connectingEdge.a !== oldVertex ? connectingEdge.a : connectingEdge.b;\r\n      vertexHolder.add(connectingPoint);\r\n    }\r\n    // Apply weight to connecting vertices.\r\n    vertexHolder.multiplyScalar(connectingVertexWeight); // β\r\n    newSourceVertex.add(vertexHolder);\r\n    // List of new positions for old vertices.\r\n    newSourceVertices.push(newSourceVertex);\r\n  } // End for loop.\r\n\r\n  // ------------------------------------------------- //\r\n  // Step 3\r\n  // Generate faces between source vertices + edge vertices.\r\n  // ------------------------------------------------- //\r\n\r\n  newVertices = newSourceVertices.concat(newEdgeVertices);\r\n  const sl = newSourceVertices.length;\r\n\r\n  let edge1, edge2, edge3;\r\n\r\n  newFaces = [];\r\n  let uv, x0, x1, x2;\r\n\tlet x3 = new THREE.Vector2();\r\n\tlet x4 = new THREE.Vector2();\r\n\tlet x5 = new THREE.Vector2();\r\n\r\n  // For all old faces create four new faces inside it.\r\n  // Four faces -> means three more edges, see above.\r\n  for (let i = 0; i < sourceFaces.length; i++) {\r\n    face = sourceFaces[i];\r\n    // find the 3 new edges vertex of each old face\r\n    edge1 = getEdge(face.a, face.b, sourceEdges).newEdgePoint + sl;\r\n    edge2 = getEdge(face.b, face.c, sourceEdges).newEdgePoint + sl;\r\n    edge3 = getEdge(face.c, face.a, sourceEdges).newEdgePoint + sl;\r\n    // create 4 faces.\r\n    newFace(newFaces, edge1, edge2, edge3);\r\n    newFace(newFaces, face.a, edge1, edge3);\r\n    newFace(newFaces, face.b, edge2, edge1);\r\n    newFace(newFaces, face.c, edge3, edge2);\r\n    // create 4 new uv's\r\n\t\tif (hasUvs) {\r\n\t\t\tuv = sourceUvs[i];\r\n\t\t\tx0 = uv[0];\r\n\t\t\tx1 = uv[1];\r\n\t\t\tx2 = uv[2];\r\n\t\t\tx3.set(midpoint(x0.x, x1.x), midpoint(x0.y, x1.y));\r\n\t\t\tx4.set(midpoint(x1.x, x2.x), midpoint(x1.y, x2.y));\r\n\t\t\tx5.set(midpoint(x0.x, x2.x), midpoint(x0.y, x2.y));\r\n\t\t\tcreateNewUv(newUvs, x3, x4, x5);\r\n\t\t\tcreateNewUv(newUvs, x0, x3, x5);\r\n\t\t\tcreateNewUv(newUvs, x1, x4, x3);\r\n\t\t\tcreateNewUv(newUvs, x2, x5, x4);\r\n\t\t}\r\n  } // End for loop\r\n  // Overwrite old arrays\r\n  geometry.vertices = newVertices;\r\n  geometry.faces = newFaces;\r\n  if (hasUvs) geometry.faceVertexUvs[0] = newUvs;\r\n  // console.log('done');\r\n}\r\n\r\nexport default SubdivisionModifier;\r\n","// ------------------------------------------------- //\r\n// Evan MacHale - N00150552\r\n// 05.01.19\r\n// Three.js\r\n// React Environment Start\r\n// ------------------------------------------------- //\r\n// Setting up ground, shape, camera, controls in React\r\n// ------------------------------------------------- //\r\n// https://stackoverflow.com/questions/41248287/how-to-connect-threejs-to-react\r\n// https://www.npmjs.com/package/three\r\n// https://www.npmjs.com/package/three-orbit-controls\r\n// ------------------------------------------------- //\r\n\r\nimport React, { Component } from 'react';\r\nimport * as THREE from 'three';\r\nimport SubdivisionModifier from './algorithm/loop';\r\nimport { saveAs } from 'file-saver';\r\nconst exportSTL = require('threejs-export-stl');\r\n// import * as OrbitControls from 'three-orbit-controls'; // Research later, no time\r\nconst OrbitControls = require('three-orbit-controls')(THREE);\r\n\r\n// ------------------------------------------------- //\r\n\r\nlet scene, camera, renderer, controls;\r\nlet shape, smooth, geometry;\r\n\r\nclass Scene extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // This binding is necessary to make `this` work in the callback\r\n    this.getGeometry = this.getGeometry.bind(this);\r\n    this.generateSubdivision = this.generateSubdivision.bind(this);\r\n  }\r\n  // If mounted successfully\r\n  componentDidMount() { // Runtime\r\n\r\n    // const width = this.mount.clientWidth;\r\n    // const height = this.mount.clientHeight; // Kinda Bugy\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n\r\n    scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xffde03);\r\n\t\t// scene.fog = new THREE.FogExp2(0xffde03, 0.1);\r\n\t\t// scene.fog = new THREE.Fog(scene.background,1,5000);\r\n\r\n    // THREE.CameraType(FOV,aspectRatio,nearClipPlane,farClipPlane);\r\n    camera = new THREE.PerspectiveCamera(75, width / height, 1, 1000);\r\n    camera.position.z = 3;\r\n    camera.position.y = 1;\r\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n    // Lights\r\n  \tconst hemisphereLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);\r\n  \t// hemisphereLight.color.setHSL(0.6, 1, 0.6);\r\n  \t// hemisphereLight.groundColor.setHSL(0.095, 1, 0.75);\r\n  \themisphereLight.position.set(0, 100, 0);\r\n  \tscene.add(hemisphereLight);\r\n    const hemiLightHelper = new THREE.HemisphereLightHelper(hemisphereLight, 10);\r\n\t\tscene.add(hemiLightHelper);\r\n\r\n    // Create a DirectionalLight and turn on shadows for the light\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.4);\r\n    // directionalLight.color.setHSL(0.1, 1, 0.95);\r\n    directionalLight.position.set(-0.5, 1.75, 0.5);\r\n    directionalLight.position.multiplyScalar(50);\r\n    directionalLight.castShadow = true; // default false\r\n    scene.add(directionalLight);\r\n\r\n    // Set up shadow properties for the light\r\n    directionalLight.shadow.mapSize.width = 2048;\r\n    directionalLight.shadow.mapSize.height = 2048;\r\n    directionalLight.shadow.camera.near = 0.5;\r\n    directionalLight.shadow.camera.far = 500;\r\n\r\n    const dirLightHeper = new THREE.DirectionalLightHelper(directionalLight, 10);\r\n\t\tscene.add(dirLightHeper);\r\n\r\n    /*\r\n    Create Geometry here\r\n    */\r\n    const plane = this.getPlane(1000,1000);\r\n    scene.add(plane);\r\n    geometry = this.getGeometry(1);\r\n    shape = this.generateSubdivision(geometry); // This will be our subdivide geometry call\r\n    scene.add(shape);\r\n\r\n    // Magic - Create our WebGL render instance.\r\n    renderer = new THREE.WebGLRenderer({antialias:true});\r\n    renderer.setSize(width, height);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    // Orbit controls\r\n    controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enablePan = false;\r\n    controls.enableKeys = false;\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.rotateSpeed = 0.1;\r\n    controls.maxDistance = 5;\r\n    controls.minDistance = 2;\r\n    controls.maxPolarAngle = 1.8; // 103.132°\r\n\r\n    // Scalable canvas.\r\n    window.addEventListener('resize', this.handleResize);\r\n\r\n    //\r\n    this.scene = scene;\r\n    this.camera = camera;\r\n    this.renderer = renderer;\r\n    this.controls = controls;\r\n    // this.material = material;\r\n    this.shape = shape;\r\n\r\n    //\r\n    this.mount.appendChild(this.renderer.domElement);\r\n    this.start();\r\n  }\r\n\r\n  // ------------------------------------------------- //\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // Typical usage (don't forget to compare props):\r\n    if (this.props !== prevProps) {\r\n      // When radio shape changes -> remove + replace\r\n      scene.remove(shape);\r\n      shape.geometry.dispose();\r\n      shape.material.dispose();\r\n      //\r\n      geometry = this.getGeometry(1);\r\n      shape = this.generateSubdivision(geometry);\r\n      shape.material.wireframe = this.props.wireframe\r\n      scene.add(shape);\r\n    }\r\n    if (this.props.exportClicked !== prevProps.exportClicked) {\r\n      this.export(shape.geometry);\r\n    }\r\n    // if (this.props.wireframe !== prevProps.wireframe) {\r\n    //   shape.material.wireframe = this.props.wireframe\r\n    // }\r\n    // if (this.props.geometry !== prevProps.geometry || this.props.subdivisions !== prevProps.subdivisions) {\r\n    //   // When radio shape changes -> remove + replace\r\n    //   scene.remove(shape);\r\n    //   shape.geometry.dispose();\r\n    //   shape.material.dispose();\r\n    //   //\r\n    //   geometry = this.getGeometry(1);\r\n    //   shape = this.generateSubdivision(geometry);\r\n    //   scene.add(shape);\r\n    // }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize');\r\n    this.stop();\r\n    this.mount.removeChild(this.renderer.domElement);\r\n  }\r\n\r\n  // ------------------------------------------------- //\r\n\r\n  start = () => {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.update);\r\n    }\r\n  }\r\n\r\n  stop = () => {\r\n    cancelAnimationFrame(this.frameId);\r\n  }\r\n\r\n  // Animation loop.\r\n  update = () => {\r\n    // We want to render the scene with the camera.\r\n    this.renderer.render(\r\n      this.scene,\r\n      this.camera\r\n    )\r\n\r\n    this.controls.update();\r\n\r\n    // Animation\r\n    // this.shape.rotation.y +=0.01;\r\n\r\n    // Without a render loop we wouldn't see anything.\r\n    // Causes the renderer to draw the scene every time the screen is refreshed (60 fps).\r\n    // requestAnimationFrame pauses when we switch tab.\r\n    this.frameId = window.requestAnimationFrame(this.update);\r\n  }\r\n\r\n  // ------------------------------------------------- //\r\n\r\n  // Resize canvas\r\n  handleResize = () => {\r\n    const width = this.mount.clientWidth;\r\n    const height = this.mount.clientHeight;\r\n    this.renderer.setSize(width, height);\r\n    this.camera.aspect = width / height;\r\n    this.camera.updateProjectionMatrix();\r\n  }\r\n\r\n  // Create a geometry for use in creating a mesh\r\n  getGeometry = (w,h) => {\r\n    let geometry;\r\n    switch (this.props.geometry) {\r\n      case 'Cone':\r\n        geometry = new THREE.ConeGeometry(w, h);\r\n        break;\r\n      case 'Cube':\r\n        geometry = new THREE.BoxGeometry(w, h);\r\n        break;\r\n      case 'Cylinder':\r\n        geometry = new THREE.CylinderGeometry(w, h);\r\n        break;\r\n      case 'Dodecahedron':\r\n        geometry = new THREE.DodecahedronGeometry(w, h);\r\n        break;\r\n      case 'Icosahedron':\r\n        geometry = new THREE.IcosahedronGeometry(w, h);\r\n        break;\r\n      case 'Octahedron':\r\n        geometry = new THREE.OctahedronGeometry(w, h);\r\n        break;\r\n      case 'Tetrahedron':\r\n        geometry = new THREE.TetrahedronGeometry(w, h);\r\n        break;\r\n      case 'Torus':\r\n        geometry = new THREE.TorusGeometry(w, h);\r\n        break;\r\n      default:\r\n        geometry = new THREE.BoxGeometry(w, h);\r\n    }\r\n    return geometry;\r\n  }\r\n\r\n  // Create a plane that receives shadows (but does not cast them)\r\n  getPlane = (w,h) => {\r\n    const geometry = new THREE.PlaneBufferGeometry(w,h);\r\n  \tconst material = new THREE.MeshPhongMaterial({side:THREE.DoubleSide});\r\n    material.color.setHex(0xffde03);\r\n  \tconst mesh = new THREE.Mesh(geometry,material);\r\n    mesh.rotation.x = -1.5708;\r\n    mesh.position.y = -2;\r\n    mesh.receiveShadow = true;\r\n  \treturn mesh;\r\n  }\r\n\r\n  // Pass geometry to be modified then return mesh to be added to the scene\r\n  generateSubdivision = (geometry) => {\r\n    // Invoke modifier\r\n    const modifier = new SubdivisionModifier(\r\n      this.props.subdivisions,\r\n      this.props.adjacent_weight,\r\n      this.props.edge_point_weight,\r\n      this.props.connecting_edges_weight\r\n    );\r\n    // Create material\r\n    const material = new THREE.MeshPhongMaterial({wireframe: this.props.wireframe});\r\n    material.color.setHex(0xff0266);\r\n    // Scaling\r\n    const params = geometry.parameters;\r\n    if ( params.scale ) {\r\n      geometry.scale( params.scale, params.scale, params.scale );\r\n    }\r\n    // Smoothing\r\n    smooth = modifier.modify(geometry);\r\n    // Unsure if I'm to take this following bit out, we'll see. React doesn't like it\r\n    // const faceIndices = ['a','b','c'];\r\n    // for (let i = 0; i < smooth.faces.length; i++) {\r\n    //   let face  = smooth.faces[ i ];\r\n    //   // 3 for face indices x, y, z.\r\n    //   for (let j = 0; j < 3; j ++) {\r\n    //     let vertexIndex = face[faceIndices[j]];\r\n    //     let vertex = smooth.vertices[vertexIndex];\r\n    //   }\r\n    // }\r\n    //\r\n    const mesh = new THREE.Mesh(smooth, material);\r\n    mesh.scale.setScalar(params.meshScale ? params.meshScale : 1);\r\n    mesh.name = `${this.props.geometry}`\r\n    mesh.castShadow = true;\r\n    mesh.receiveShadow = false;\r\n    return mesh;\r\n  }\r\n\r\n  export = (geometry) => {\r\n    const buffer = exportSTL.fromGeometry(geometry);\r\n    const blob = new Blob([buffer], { type: exportSTL.mimeType });\r\n    saveAs(blob, 'shape.stl');\r\n  }\r\n\r\n  // ------------------------------------------------- //\r\n\r\n  render() {\r\n    return (\r\n      <main\r\n        className=\"canvas\"\r\n        ref={mount => {\r\n          this.mount = mount\r\n        }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n// ------------------------------------------------- //\r\n\r\nexport default Scene;\r\n","// ------------------------------------------------- //\r\n// Evan MacHale - N00150552\r\n// 15.01.19\r\n// Geometry Radio Button\r\n// ------------------------------------------------- //\r\n\r\nimport React, { Component } from 'react';\r\nimport Radio, { NativeRadioControl } from '@material/react-radio';\r\nimport { ListItem, ListItemText, ListItemMeta } from '@material/react-list';\r\n\r\n// ------------------------------------------------- //\r\n\r\nclass Radio_ extends Component {\r\n  render () {\r\n    return (\r\n      <ListItem className='drawer-list-item'>\r\n        <ListItemText primaryText={this.props.name} />\r\n        <ListItemMeta meta=\r\n          <Radio className='radio-alternate' wrapperClasses='mdc-list-item__meta'>\r\n            <NativeRadioControl\r\n              name='geometry'\r\n              value={this.props.name}\r\n              id={this.props.name}\r\n              onChange={this.props.onChange}\r\n            />\r\n          </Radio>\r\n        />\r\n      </ListItem>\r\n    );\r\n  }\r\n}\r\n\r\n// ------------------------------------------------- //\r\n\r\nexport default Radio_;\r\n\r\n// ------------------------------------------------- //\r\n","// ------------------------------------------------- //\r\n// Evan MacHale - N00150552\r\n// 15.01.19\r\n// List item of radio buttons inserted into drawer\r\n// ------------------------------------------------- //\r\n\r\nimport React, { Component } from 'react';\r\nimport { ListItem, ListItemText, ListItemMeta } from '@material/react-list';\r\nimport Checkbox from '@material/react-checkbox';\r\n\r\n// ------------------------------------------------- //\r\n\r\n// My components\r\nimport Radio from './input/Radio_';\r\n\r\n// ------------------------------------------------- //\r\n\r\nclass GeometryList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checked: false\r\n    };\r\n  }\r\n\r\n  render () {\r\n    // Geometries contents\r\n    const geometries = [\r\n      {name:'Cone', image:'http://showcase.iadt.ie/assets/CC3/Headshot/N00153748_Profile.jpg'},\r\n      {name:'Cube', image:'http://showcase.iadt.ie/assets/CC3/Headshot/N00153748_Profile.jpg'},\r\n      {name:'Cylinder', image:'http://showcase.iadt.ie/assets/CC3/Headshot/N00150552_Profile.jpg'},\r\n      {name:'Dodecahedron', image:'http://showcase.iadt.ie/assets/CC3/Headshot/N00150552_Profile.jpg'},\r\n      {name:'Icosahedron', image:'http://showcase.iadt.ie/assets/CC3/Headshot/N00150552_Profile.jpg'},\r\n      {name:'Octahedron', image:'http://showcase.iadt.ie/assets/CC3/Headshot/N00153748_Profile.jpg'},\r\n      {name:'Tetrahedron', image:'http://showcase.iadt.ie/assets/CC3/Headshot/N00152737_Profile.jpg'},\r\n      {name:'Torus', image:'http://showcase.iadt.ie/assets/CC3/Headshot/N00153748_Profile.jpg'}\r\n    ];\r\n    // Passing Props to generate list\r\n    const geometries_list = geometries.map(g => {\r\n      return (\r\n        <Radio\r\n          key={g.name}\r\n          name={g.name}\r\n          image={g.image}\r\n          onChange={this.props.onChange}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {geometries_list}\r\n        <ListItem className='drawer-list-item'>\r\n          <ListItemText primaryText='Wireframe' />\r\n          <ListItemMeta meta=\r\n            <Checkbox\r\n              className='checkbox-alternate'\r\n              name='wireframe'\r\n              checked={this.state.checked}\r\n              value={this.state.checked}\r\n              onChange={this.props.onChange}\r\n            />\r\n          />\r\n        </ListItem>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// onChange={(e) => this.setState({\r\n//   checked: e.target.checked,\r\n//   indeterminate: e.target.indeterminate})\r\n// }\r\n\r\n// ------------------------------------------------- //\r\n\r\nexport default GeometryList;\r\n\r\n// ------------------------------------------------- //\r\n","// ------------------------------------------------- //\r\n// Evan MacHale - N00150552\r\n// 15.01.19\r\n// Function slider\r\n// ------------------------------------------------- //\r\n\r\nimport React from 'react';\r\nimport { ListItem, ListItemText, ListItemMeta } from '@material/react-list';\r\n\r\n// ------------------------------------------------- //\r\n\r\n/*\r\n  material-components-web-react does not currently support sliders\r\n  However, the material-components-web repository does\r\n  The following codes implements the material-components-web version\r\n*/\r\n\r\n// import {MDCSlider} from '@material/slider';\r\n// const slider = new MDCSlider(document.querySelector('.mdc-slider'));\r\n// slider.listen('MDCSlider:change', () => console.log(`Value changed to ${slider.value}`));\r\n\r\n/*\r\n  Using material-components-web involves setting up webpack\r\n  I would have to set up a heap load more dependencies and install effectively another framework in this app\r\n  Furthermore, it would require a re-configuring of all 'src' files and a different compiling structure that doesn't fit with the current system by MDC React\r\n  I have no time for this as of 13.01.19\r\n  ... also material-components-web is pure html/css and doesn't implement components\r\n  // https://github.com/material-components/material-components-web/blob/master/docs/getting-started.md\r\n\r\n  I will therefore use the 'material-ui' react framework to install individual components:\r\n  // https://material-ui.com/lab/api/slider/\r\n*/\r\n\r\nimport Slider from '@material-ui/lab/Slider';\r\n\r\n// ------------------------------------------------- //\r\n\r\n/*\r\n  material-ui Slider:\r\n  https://material-ui.com/lab/slider/\r\n  Simple alternative to:\r\n  https://github.com/material-components/material-components-web/tree/master/packages/mdc-slider\r\n*/\r\n\r\nclass Slider_ extends React.Component {\r\n  state = {\r\n    value: 0,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ListItem className='drawer-list-item'>\r\n          <ListItemText primaryText={this.props.label} />\r\n          <ListItemMeta meta={`${this.props.value}`} />\r\n          {/*\r\n            <ListItemMeta meta=\r\n            <TextField dense={true}>\r\n              <Input\r\n                name='slider'\r\n                value={this.props.value}\r\n                onChange={this.props.onChange}\r\n              />\r\n            </TextField>\r\n          />\r\n          */}\r\n        </ListItem>\r\n        <ListItem id={this.props.name} className='drawer-slider'>\r\n          <Slider classes={{thumb: 'drawer-slider-material', trackBefore: 'drawer-slider-material'}}\r\n            min={this.props.min}\r\n            max={this.props.max}\r\n            step={this.props.step}\r\n            value={this.props.value}\r\n            aria-labelledby='label'\r\n            onChange={this.props.onChange}\r\n          />\r\n        </ListItem>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// ------------------------------------------------- //\r\n\r\nexport default Slider_;\r\n","// ------------------------------------------------- //\r\n// Evan MacHale - N00150552\r\n// 15.01.19\r\n// Geometries radio list\r\n// ------------------------------------------------- //\r\n\r\nimport React, { Component } from 'react';\r\n\r\n// ------------------------------------------------- //\r\n\r\n// My components\r\nimport Slider from './input/Slider_';\r\n\r\n// ------------------------------------------------- //\r\n\r\nclass FunctionList extends Component {\r\n  render () {\r\n    // function options for slider\r\n    const functions = [\r\n      {label:'Subdivisions', name:'subdivisions', value:this.props.subdivisions, min:0, max:5, step:1},\r\n      {label:'Adjacent Weight', name:'adjacent_weight', value:this.props.adjacent_weight, min:0, max:1, step:null},\r\n      {label:'Edge-Point Weight', name:'edge_point_weight', value:this.props.edge_point_weight, min:0, max:1, step:null},\r\n      {label:'Connecting Edges Weight', name:'connecting_edges_weight', value:this.props.connecting_edges_weight, min:1, max:7, step:1}\r\n    ];\r\n    // Passing Props to generate list\r\n    const functions_list = functions.map(f => {\r\n      return (\r\n        <Slider\r\n          key={f.name}\r\n          label={f.label}\r\n          name={f.name}\r\n          value={f.value}\r\n          onChange={this.props.onChange}\r\n          min={f.min}\r\n          max={f.max}\r\n          step={f.step}\r\n        />\r\n      )\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {functions_list}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// ------------------------------------------------- //\r\n\r\nexport default FunctionList;\r\n\r\n// ------------------------------------------------- //\r\n","// ------------------------------------------------- //\n// Evan MacHale - N00150552\n// 06.01.19\n// React + Material Design\n// ------------------------------------------------- //\n// https://github.com/material-components/material-components-web-react\n// https://github.com/material-components/material-components-web-react#step-3a-use-compiled-css\n// https://sass-lang.com/guide\n// ------------------------------------------------- //\n\nimport React, { Component } from 'react';\n// Material Design Components\nimport TopAppBar, {TopAppBarFixedAdjust} from '@material/react-top-app-bar';\nimport Drawer, {DrawerAppContent, DrawerContent, DrawerHeader, DrawerTitle} from '@material/react-drawer';\nimport List, { ListGroup, ListDivider } from '@material/react-list';\nimport Button from '@material/react-button';\nimport { ListItem } from '@material/react-list';\n\n/*\n  Problem loading Icons via JavaScript\n  Linked in index.html via Google web fonts -> faster\n  https://github.com/material-components/material-components-web-react/tree/master/packages/material-icon\n*/\n\nimport MaterialIcon from '@material/react-material-icon';\n\n// ------------------------------------------------- //\n\n// My Components\nimport Scene from './components/Scene';\nimport GeometryList from './components/GeometryList';\nimport FunctionList from './components/FunctionList';\n\n// ------------------------------------------------- //\n\nimport './App.scss';\n\n// ------------------------------------------------- //\n\n// Most of our material components will be compiled here alongside our canvas... I hope\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawerOpen: true,\n      exportClicked: false,\n      // For the Scene\n      geometry: 'Cube',\n      wireframe: false,\n      subdivisions: 0,\n      adjacent_weight: 0.125,\n      edge_point_weight: 0.375,\n      connecting_edges_weight: 5\n    };\n    // This binding is necessary to make `this` work in the callback\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  toggleDrawer = () => {\n    this.setState(prevState => ({\n      drawerOpen: !prevState.drawerOpen\n    }));\n  }\n\n  handleChange = (event, slider_value) => {\n    /*\n      event.target when slider is changed is an <li> element\n      It does not have event.target.value/name\n      However the value of the slider may be passed directly as sliderValue\n      This does not appply to the other targets as they are <input>\n      See https://material-ui.com/lab/slider/\n    */\n    const id = event.target.id;\n    const name = event.target.type === 'checkbox' ? 'wireframe' : event.target.name;\n    const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\n    this.setState({\n      [name]: value\n    });\n    // Truthy/falsy\n    if (slider_value || slider_value === 0) {\n      this.setState({\n        [id]: slider_value\n      });\n    }\n  }\n\n  handleClick = () => {\n    this.setState(prevState => ({\n      exportClicked: prevState.exportClicked + 1\n    }));\n  }\n\n  render() {\n    return (\n      <div className='drawer-container'>\n        <Drawer\n          className='drawer-alternate'\n          dismissible={true}\n          open={this.state.drawerOpen}\n        >\n          <DrawerHeader className='drawer-title'>\n            <DrawerTitle tag='h2'>Menu</DrawerTitle>\n          </DrawerHeader>\n\n          <DrawerContent>\n            <ListGroup>\n              <List nonInteractive={true}>\n                <GeometryList\n                  geometry={this.state.geometry}\n                  wireframe={this.state.wireframe}\n                  onChange={this.handleChange}\n                />\n              </List>\n              <ListDivider className='drawer-divider'/>\n              <List nonInteractive={true}>\n                <FunctionList\n                  subdivisions={this.state.subdivisions}\n                  adjacent_weight={this.state.adjacent_weight}\n                  edge_point_weight={this.state.edge_point_weight}\n                  connecting_edges_weight={this.state.connecting_edges_weight}\n                  onChange={this.handleChange}\n                />\n              </List>\n              <ListDivider className='drawer-divider'/>\n              <List nonInteractive={true}>\n                <ListItem className='drawer-list-item'>\n                  <Button\n                    className='button-alternate-clear'\n                    outlined\n                    onClick={this.handleClick}\n                  >\n                    Download .stl\n                  </Button>\n                </ListItem>\n              </List>\n            </ListGroup>\n          </DrawerContent>\n        </Drawer>\n\n        <DrawerAppContent className='drawer-app-content'>\n          <TopAppBar\n            title='Generative Jewellery'\n            className = 'top-app-bar-alternate'\n            navigationIcon={<MaterialIcon\n              icon='menu'\n              onClick={this.toggleDrawer}\n            />}\n          />\n\n          <TopAppBarFixedAdjust>\n            <Scene\n              geometry={this.state.geometry}\n              subdivisions={this.state.subdivisions}\n              adjacent_weight={this.state.adjacent_weight}\n              edge_point_weight={this.state.edge_point_weight}\n              connecting_edges_weight={this.state.connecting_edges_weight}\n              wireframe={this.state.wireframe}\n              exportClicked={this.state.exportClicked}\n            />\n          </TopAppBarFixedAdjust>\n        </DrawerAppContent>\n      </div>\n    );\n  }\n}\n\n// ------------------------------------------------- //\n\nexport default App;\n\n// ------------------------------------------------- //\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}